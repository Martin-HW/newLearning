//Reverse a string

// const reverseAstring = (str) => {
//     return str.split("").reverse().join("")
// }

// console.log(reverseAstring("Reverse a string"));

// const reverseAstring = (str) => {
//     let empty = "";
//     let one = str.split("");
//     for(let i = one.length - 1; i>=0; i--){
//         empty = empty + one[i];
//     }
//     return empty;
// }

// console.log(reverseAstring("Reverse a string"));


/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

//Factorialize

// const FactorializeAnum = (num) => {
//     let numArr = [];
//     for(let i = num; i >= 1; i--){
//         numArr.push(i)
//     }
//     let one = numArr.reduce((total,val,ind,arr)=>{
//         return total * val
//     });
//     return one
// }
// console.log(FactorializeAnum(5));

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

//Palindrome

// const palindromeCheck = (str) => {
//     if(typeof(str) === "string"){
//         let one = str.split("").reverse().join("")
//         if(str === one){
//             return "PALINDROME";
//         }else{
//             return "NOT a palindrome"
//         }
//     }else{
//         "The input is NOT a string";
//     }
// }
// console.log(palindromeCheck("kikin"));
// console.log(palindromeCheck("eye"));

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// const findLongestWord = (arr) => {
//     let one = arr.map((val, ind, arr)=>{
//         return val.length;
//     }).sort((a,b)=>{
//         return a - b;
//     });
//     let lengthWord = one[one.length-1];
//     let word = arr.filter((val,ind,arr)=>{
//         if(val.length === lengthWord){
//             return val;
//         }
//     })
//     return word.join(" ") + " has " + lengthWord + " letters."
 
// }

// console.log(findLongestWord(['martin', 'ivan', 'suarez', 'mendez', 'cristiano', 'ronaldo']));


/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// const titleCase = (str) => {
//     let one = str.split(" ");
//     let two = one.map((val,ind,arr)=>{
//         let capital = val[0].toUpperCase();
//         let rest = val.slice(1);
//         let addition = capital + rest;

//         return addition;
//     })
//     return two;
// }

// console.log(titleCase("martin ivan suarez mendez"));


/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// const largestOfFour = (arr) => {
//     let one = arr.map((val,ind,arr)=>{
//         return [Math.max(...val)]
//     });
//     return one;
// }

// console.log(largestOfFour([
//     [1,2,3,4],
//     [5,6,7,8],
//     [9,10,11,12],
//     [13,14,15,16]
// ]));

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// const confirmEnding = (str, target) => {
//     let one = str.endsWith(target) ? `${str} ends with ${target}` : `The word DOESN'T even match`;
//     return one;
// }
// console.log(confirmEnding("Bastian", "n"));
// console.log(confirmEnding("Bastian", "ES"));

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// const repeatStringNumTimes = (str, num) => {
//     let one = str.repeat(num);
//     return one;
// }
// console.log(repeatStringNumTimes("martin", 5));

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// const repeatStringNumTimes = (str, num) => {
//     let name = "";
//     let letter = str.length * num;
//     for(let i = 1; i < letter; i++){
//         console.log(name + str);
//     }
// }
// console.log(repeatStringNumTimes("martin", 5));


/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// const truncateString = (str, num) => {
//     return str
// }
// console.log(truncateString("martin ivan suarez mendez", 5));

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// Return Negative CODEWARS

// makeNegative(1); // return -1
// makeNegative(-5); // return -5
// makeNegative(0); // return 0
// makeNegative(0.12); // return -0.12

// const makeNegative = (num) => {
//    if(num <= 0){
//         return num
//    }else if(num > 0 % 1 === 0){
//         return parseInt(`-${num}`);
//    }else{
//         return parseFloat(`-${num}`);
//    }
// }

// console.log(makeNegative(10));
// console.log(makeNegative(-5));
// console.log(makeNegative(0));

// Number(); //whats this???


/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
// Reversed Words CODEWARS

// const reverseWords = (str) => {
//     return str.split(" ").reverse().join(" ");
// }

// console.log(reverseWords("The greatest victory is that which requires no battle"));
// should return "battle no requires which that is victory greatest The"

// function reverseWords(str){
//     var reverse = [];
//     var words = str.split(" ");
//     for(let i=words.length-1; i>=0; i--){
//       reverse.push(words[i]);
      
//     }
//     return reverse.join(" ")
// }

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// Difference of Volumes of Cuboids CODEWARS

// const findDifference = (a, b) => {
//     let first = a.reduce((x,y)=>{return x * y}); 
//     let second = b.reduce((x,y)=>{return x * y});
//     return second > first ? second - first : first - second; 
// }

// console.log(findDifference([3, 2, 5], [1, 4, 4]));

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// Find Maximum and Minimum Values of a List CODEWARS

// max([4,6,2,1,9,63,-134,566]) returns 566
// min([-52, 56, 30, 29, -54, 0, -110]) returns -110
// max([5]) returns 5
// min([42, 54, 65, 87, 0]) returns 0

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// String repeat CODEWARS


// const repeatStr = (num, text) => {
//     return text.repeat(num);
// }

// console.log(repeatStr(10, "martin"));
// repeatStr(6, "I") // "IIIIII"
// repeatStr(5, "Hello") // "HelloHelloHelloHelloHello"

// const repeatStr = (num, text) => {
//     for(let i = 0; i<=num; i++){
//         console.log(text+i)
//     }
// }

// console.log(repeatStr(10, "martin"));

// function repeatStr (n, s) {
//     var str="";
//     for(var i=0; i < n; i++)
//       str+=s;
//       return str;
// }

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// Merge two sorted arrays into one CODEWARS

// function mergeArrays(arr1, arr2) {
//     return [...arr1, ...arr2].sort((a, b)=>{return a - b});
// }


/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// Easy wallpaper CODEWARS 7kyu

// let numbers = [
//     "zero", "one", "two", "three", "four", "five", 
//     "six", "seven", "eight", "nine", "ten", 
//     "eleven", "twelve","thirteen", "fourteen", "fifteen", 
//     "sixteen", "seventeen", "eighteen", "nineteen", "twenty"
//     ];

// const wallpaper = (l, w, h) => {
//     // your code
// }

// console.log(wallpaper());


/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

// Olympic Rings CODEWARS 7 kyu

// const olympicRing = (a) => {
//     return a;
// }


// console.log(olympicRing('Martin'));

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/


/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/


/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/


/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/



/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/



/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/



/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/



/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/



/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/



/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/



/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/